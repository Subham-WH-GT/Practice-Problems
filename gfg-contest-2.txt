# 11 Aug (Max Productivity)


    int N;
    int SUM=INT_MIN;
    int dp[101][5001];
    
  int solve(vector<int> &prod, int i, int target, int sum){
      if(i>=N){
          if(abs(sum-target)<abs(SUM-target)) SUM=sum;
          return 0;
      }
      
      if(dp[i][sum] != -1) return dp[i][sum];
      solve(prod,i+1,target,sum+prod[i]);
      solve(prod,i+1,target,sum);
      
    //   if(abs(take-target)<abs(skip-target)) return take;
    //   return skip;
    return dp[i][sum]=SUM;
  }
  
    int getMaxProductivity(int n, vector<int> &prod) {
        // code here
        N=n;
        int tsum=0;
        for(int i=0;i<n;i++){
            tsum+=prod[i];
        }
        
        int target_sum=tsum/2;
        memset(dp,-1,sizeof(dp));
        int G1=solve(prod,0,target_sum,0);
        int G2=tsum-G1;
        
        return G1*G2;
        
   
    }