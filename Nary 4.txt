## Dept of Nary tree ->

#include<iostream>
#include <vector>
#include<queue>
using namespace std;

struct Node{
  int val;
  vector<Node*>child;
  
};


Node* newNode(int key)
{
    Node* temp = new Node;
    temp->val = key;
    return temp;
}

int depth(Node* root){
    int lvl=0;
    
    queue<Node*>q;
    q.push(root);
    
    while(!q.empty()){
        int n=q.size();
        lvl++;
        while(n--){
          Node* node=q.front();
          q.pop();
          for(auto& v:node->child){
            q.push(v);  
          }
        }
    }
    
    return lvl;
}

int main(){
    Node *root = newNode(1); 
   (root->child).push_back(newNode(3)); 
   (root->child).push_back(newNode(5)); 
//   (root->child).push_back(newNode('D')); 
//   (root->child).push_back(newNode('E')); 
   (root->child[0]->child).push_back(newNode(8)); 
   (root->child[0]->child).push_back(newNode(9)); 
   (root->child[0]->child).push_back(newNode(10)); 
   (root->child[1]->child).push_back(newNode(11)); 
   (root->child[1]->child).push_back(newNode(12)); 
   (root->child[1]->child).push_back(newNode(13)); 
   (root->child[0]->child[2]->child).push_back(newNode(15)); 
   (root->child[0]->child[2]->child).push_back(newNode(16)); 
   (root->child[0]->child[2]->child[0]->child).push_back(newNode(4));
   
    (root->child[1]->child[2]->child).push_back(newNode(17)); 
   (root->child[1]->child[2]->child).push_back(newNode(18)); 
   (root->child[1]->child[2]->child).push_back(newNode(19));
   
    (root->child[1]->child[2]->child[0]->child).push_back(newNode(2)); 
     (root->child[1]->child[2]->child[0]->child[0]->child).push_back(newNode(6));
         (root->child[1]->child[2]->child[0]->child[0]->child).push_back(newNode(7)); 
         (root->child[1]->child[2]->child[0]->child[0]->child[1]->child).push_back(newNode(14)); 

 
   
   cout<<depth(root)<<endl;
    return 0;
}