class Solution{
public:
    vector<int>segTree;
    
    void buildSegTree(int i, int l, int r, int arr[]){
        if(l==r) {
            segTree[i]=arr[l];
            return;
        }
        
        int mid=(l+r)/2;
        buildSegTree(2*i+1,l,mid,arr);
        buildSegTree(2*i+2,mid+1,r,arr);
        
        segTree[i]=segTree[2*i+1] ^ segTree[2*i+2];
    }
    
    int querySegTree(int start, int end, int i, int l, int r){
        
        if(l>end || r<start){
            return 0;
        }
        
        if(start<=l and end>=r) return segTree[i];
        
        int mid=(l+r)/2;
        
          int leftQuery = querySegTree(start, end, 2 * i + 1, l, mid);
    int rightQuery = querySegTree(start, end, 2 * i + 2, mid + 1, r);
    return leftQuery ^ rightQuery;
        //  return querySegTree(start,end,2*i+1,l,mid)^querySegTree(start,end,2*i+2,mid+1,r);
    }

    vector<int> specialXor(int N, int Q, int a[], vector<int> query[])
    {
        // code here
        segTree.resize(4*N);
        // vector<int>arr(a,a+N);
        buildSegTree(0,0,N-1,a);
        
        int totalXor=0;
        for(int i=0;i<N;i++){
            totalXor^=a[i];
        }
        vector<int>ans;
        for(int i=0;i<Q;i++){
        //   const vector<int>&q=query[i];
            int start=query[i][0]-1;
            int end=query[i][1]-1;
            int val=querySegTree(start,end,0,0,N-1);
            ans.push_back(totalXor ^ val);
        }
        
        return ans;
    }