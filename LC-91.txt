
My approach--2D dp



int n;
	int dp[101][101];
	
	bool valid(string& s, int i, int j){
	    
	    if(s[i]=='0') return false;
	    
	    string temp=s.substr(i,j-i+1);
	    
	    int num=stoi(temp);
	    
	    if(num>=1 and num<=26) return true;
	    
	    return false;
	}
	
	int solve(string& str, int i, int j){
	    
	    if(i>=n and j>=n) return 1;
	    
	    if(i>=n || j>=n) return 0;
	    
	    if(j-i > 1) return 0;
	    
	    if(dp[i][j] != -1) return dp[i][j];
	   // if(! valid(str,i,j)) return 0;
	    
	    int alone=0,take_next=0;
	    
	    if(i==j and valid(str,i,i)){
	        alone+=solve(str,i+1,j+1);
	    }
	    
	    if(i!=n-1 and j!=n-1 and valid(str,i,j+1)){
	      take_next+=solve(str,j+2,j+2);  
	    }
	    
	    
	    return dp[i][j]= alone+take_next;
	}


    int numDecodings(string str) {
         n=str.length();
		    memset(dp,-1,sizeof(dp));
		    return solve(str,0,0);
    }