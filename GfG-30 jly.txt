  vector<string>ans;
  int n;
  
  void solve(vector<vector<int>> &mat, int i, int j, string temp, vector<vector<bool>>&visited){
     
      if(i<0 || i>=n || j<0 || j>=n || mat[i][j]==0 || visited[i][j]) return;
    //  if(mat[i][j]==0) return;
     
      if(i==n-1 and j==n-1){
          ans.push_back(temp);
          return;
      }
      
     
      
      visited[i][j]=true;
      
    //   if(temp.length()==0){
    //     solve(mat,i+1,j,temp+'D');
    //     solve(mat,i-1,j,temp+'U');
    //     solve(mat,i,j+1,temp+'R');
    //     solve(mat,i,j-1,temp+'L');
    //   }
      
      
    //   if(i+1 < n)
        solve(mat,i+1,j,temp+'D',visited);
    //   if(temp.back() != 'D')        
        solve(mat,i-1,j,temp+'U',visited);
    //   if(temp.back() != 'L')    
        solve(mat,i,j+1,temp+'R',visited);
    //   if(temp.back() != 'R')    
        solve(mat,i,j-1,temp+'L',visited);     
        
        visited[i][j]=false;
      
      

      
  }
  
    vector<string> findPath(vector<vector<int>> &mat) {
        // Your code goes here
        
        if(mat[0][0]==0) return {};
        
        n=mat.size();
        // m=mat[0].size();
        vector<vector<bool>>visited(n,vector<bool>(n,false));
        solve(mat,0,0,"",visited);
        return ans;
    }