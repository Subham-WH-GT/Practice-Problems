 
#  Element left after performing alternate OR & XOR operation


 vector<int>segTree;
    
    void buildSegTree(int i, int l, int r, int a[], bool orr){
        
        if(l==r){
            segTree[i]=a[l];
            return;
        }
        
        int mid=l+(r-l)/2;
        buildSegTree(2*i+1,l,mid,a,!orr);
        buildSegTree(2*i+2,mid+1,r,a,!orr);
        
        if(orr){
            segTree[i]=segTree[2*i+1]|segTree[2*i+2];
        }
        
        else{
            segTree[i]=segTree[2*i+1]^segTree[2*i+2];
        }
    }
    
    
    void querySegTree(int i, int l, int r, int idx, int val, bool orr){
        
        if(l==r){
            segTree[i]=val;
            return;
        }
        
        int mid=l+(r-l)/2;
        if(idx<=mid){
            querySegTree(2*i+1,l,mid,idx,val,!orr);
        }
        
        else{
            querySegTree(2*i+2,mid+1,r,idx,val,!orr);
        }
        
        if(orr){
            segTree[i]=segTree[2*i+1]|segTree[2*i+2];
        }
        
        else{
            segTree[i]=segTree[2*i+1]^segTree[2*i+2];
        }
        
    }

    vector<int> left(int N, int A[], int q, vector<pair<int, int>> query)
    {
        // code here
        segTree.resize(4*N);
        
        int hi=log2(N);
        
        if(hi %2 != 0) buildSegTree(0,0,N-1,A,true);
        
        else{
            buildSegTree(0,0,N-1,A,false);
        }
        
        vector<int>ans;
        
        for(int i=0;i<q;i++){
            int idx=query[i].first;
            int val=query[i].second;
            
            if(idx>=N) ans.push_back(-1);
            
            else{
                if(hi%2 !=0){
                    querySegTree(0,0,N-1,idx,val,true);
                }
                
                else{
                   querySegTree(0,0,N-1,idx,val,false); 
                }
                
                ans.push_back(segTree[0]);
            }
        }
        
        return ans;
    }